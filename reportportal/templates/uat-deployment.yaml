apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "reportportal.fullname" . }}-uat
  labels: {{ include "labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: {{ include "reportportal.fullname" . }}-uat
  template:
    metadata:
      labels:
        {{- range $key, $value := .Values.uat.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        component: {{ include "reportportal.fullname" . }}-uat
      annotations:
        {{- range $key, $value := .Values.uat.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        "helm.sh/hook": post-install,post-upgrade
        "helm.sh/hook-weight": "5"
        "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    spec:
      initContainers:
      {{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
      {{- end }}
      containers:
      - env:
{{- if .Values.uat.extraEnvs }}
{{ toYaml .Values.uat.extraEnvs | indent 8 }}
{{- end }}
        {{- if .Values.uat.superadminInitPasswd.auto }}
        - name: RP_INITIAL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ template "reportportal.name" . }}-superadmin-passwd"
              key: "superadmin-passwd"
        {{ else }}
        - name: RP_INITIAL_ADMIN_PASSWORD
          value: "{{ .Values.uat.superadminInitPasswd.password }}"
        {{- end }}
        - name: RP_SAML_SESSION-LIVE
          value: "{{ .Values.uat.samlSessionLiveTime }}"
        {{- if .Values.uat.jvmArgs }}
        - name: JAVA_OPTS
          value: "{{ .Values.uat.jvmArgs }}"
        {{- end }}
        - name: RP_SESSION_LIVE
          value: "{{ .Values.uat.sessionLiveTime }}"
        - name: RP_DB_HOST
          value: {{ .Values.postgresql.endpoint | default (printf "%s-postgresql.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}
        - name: RP_DB_PORT
          value: "{{ .Values.postgresql.servicePort }}"
        - name: RP_DB_NAME
          value: "{{ .Values.postgresql.postgresqlDatabase }}"
        - name: RP_DB_USER
          value: "{{ .Values.postgresql.postgresqlUsername }}"
        - name: RP_DB_PASS
        {{- if .Values.postgresql.SecretName }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.postgresql.SecretName }}"
              key: "postgresql-password"
        {{- else }}
          value: "{{ .Values.postgresql.postgresqlPassword }}"
        {{- end }}
        {{- if .Values.minio.enabled }}
        - name: RP_BINARYSTORE_TYPE
          value: "{{ .Values.minio.type }}"
        - name: RP_BINARYSTORE_MINIO_ENDPOINT
          value: "{{ .Values.minio.endpoint | default (printf "http://%s-minio.%s.svc.cluster.local:9000" .Release.Name .Release.Namespace) }}"
        {{- if .Values.minio.region }}
        - name: RP_BINARYSTORE_MINIO_REGION
          value: "{{ .Values.minio.region }}"
        {{- end }}
        {{- if .Values.minio.secretName }}
        - name: RP_BINARYSTORE_MINIO_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "{{ .Values.minio.accesskeyName }}"
        - name: RP_BINARYSTORE_MINIO_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "{{ .Values.minio.secretkeyName }}"
        {{- else }}
        - name: RP_BINARYSTORE_MINIO_ACCESSKEY
          value: "{{ .Values.minio.accesskey }}"
        - name: RP_BINARYSTORE_MINIO_SECRETKEY
          value: "{{ .Values.minio.secretkey }}"
        {{- end }}
        {{- if .Values.minio.bucketPrefix}}
        - name: RP_BINARYSTORE_MINIO_BUCKETPREFIX
          value: "{{ .Values.minio.bucketPrefix }}"
        {{- end }}
        {{- if .Values.minio.defaultBucketName}}
        - name: RP_BINARYSTORE_MINIO_DEFAULTBUCKETNAME
          value: "{{ .Values.minio.defaultBucketName }}"
        {{- end }}
        {{- if .Values.minio.integrationSaltPath }}
        - name: RP_INTEGRATION_SALT_PATH
          value: "{{ .Values.minio.integrationSaltPath }}"
        {{- end }}
        {{- end }}
        name: uat
        image: "{{ .Values.uat.repository }}:{{ .Values.uat.tag }}"
        ports:
        - containerPort: 9999
          protocol: TCP
        resources:
          requests:
            cpu: {{ .Values.uat.resources.requests.cpu }}
            memory: {{ .Values.uat.resources.requests.memory }}
          limits:
            cpu: {{ .Values.uat.resources.limits.cpu }}
            memory: {{ .Values.uat.resources.limits.memory }}
        {{- if .Values.uat.readinessProbe }}
        {{- if .Values.uat.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: "{{ .Values.rp.healthEndpoint }}"
            port: 9999
          initialDelaySeconds: {{ .Values.uat.readinessProbe.initialDelaySeconds | default 60 }}
          periodSeconds: {{ .Values.uat.readinessProbe.periodSeconds | default 40 }}
          timeoutSeconds: {{ .Values.uat.readinessProbe.timeoutSeconds | default 5 }}
          failureThreshold: {{ .Values.uat.readinessProbe.failureThreshold | default 10 }}
        {{- end }}
        {{- end }}
        {{- if .Values.uat.livenessProbe }}
        {{- if .Values.uat.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: "{{ .Values.rp.healthEndpoint }}"
            port: 9999
          initialDelaySeconds: {{ .Values.uat.livenessProbe.initialDelaySeconds | default 60 }}
          periodSeconds: {{ .Values.uat.livenessProbe.periodSeconds | default 40 }}
          timeoutSeconds: {{ .Values.uat.livenessProbe.timeoutSeconds | default 5 }}
          failureThreshold: {{ .Values.uat.livenessProbe.failureThreshold | default 10 }}
        {{- end }}
        {{- end }}
        volumeMounts:
          {{- if .Values.uat.secret.enabled }}
          - mountPath: {{ .Values.uat.secret.mountPath }}
            name: {{ template "reportportal.name" . }}-uat-secret
            readOnly: {{ .Values.uat.secret.readOnly }}
          {{- end }}
{{- if .Values.uat.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := .Values.uat.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
{{- end }}
      securityContext:
{{ toYaml .Values.uat.securityContext | indent 8}}
      serviceAccountName: {{ .Values.uat.serviceAccountName }}
      tolerations:
{{- with .Values.tolerations }}
      tolerations: 
{{- toYaml . | nindent 8 }}
{{- end }}
      volumes:
        {{- if .Values.uat.secret.enabled }}
        - name: {{ template "reportportal.name" . }}-uat-secret
          secret:
            secretName: {{ template "reportportal.name" . }}-uat-secret
        {{- end }}
