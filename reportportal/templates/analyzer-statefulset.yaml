apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "reportportal.fullname" . }}-analyzer
  labels: {{ include "labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: {{ include "reportportal.fullname" . }}-analyzer
  serviceName: {{ include "reportportal.fullname" . }}-analyzer
  template:
    metadata:
      labels:
        {{- range $key, $value := .Values.serviceanalyzer.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        component: {{ include "reportportal.fullname" . }}-analyzer
      annotations:
        {{- range $key, $value := .Values.serviceanalyzer.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      initContainers:
      {{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
      {{- end }}
      containers:
      - env:
{{- if .Values.serviceanalyzer.extraEnvs }}
{{ toYaml .Values.serviceanalyzer.extraEnvs | indent 8 }}
{{- end }}
      {{- if .Values.minio.enabled }}
        - name: ANALYZER_BINARYSTORE_TYPE
          value: "minio"
        - name: MINIO_SHORT_HOST
          value: "{{ .Values.minio.endpointshort | default (printf "%s-minio.%s.svc.cluster.local:9000" .Release.Name .Release.Namespace) }}"
        {{- if .Values.minio.secretName }}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "{{ .Values.minio.accesskeyName }}"
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.minio.secretName }}"
              key: "{{ .Values.minio.secretkeyName }}"
       {{- else }}
        - name: MINIO_ACCESS_KEY
          value: "{{ .Values.minio.accesskey }}"
        - name: MINIO_SECRET_KEY
          value: "{{ .Values.minio.secretkey }}"
       {{- end }}
       {{- end }}
        - name: RP_AMQP_PASS
        {{- if .Values.rabbitmq.SecretName }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.rabbitmq.SecretName }}"
              key: "rabbitmq-password"
        {{- else }}
          value: "{{ .Values.rabbitmq.auth.password }}"
        {{- end }}
        - name: AMQP_URL
          value: {{ ternary "amqps" "amqp" .Values.rabbitmq.ssl }}://{{ .Values.rabbitmq.auth.username }}:$(RP_AMQP_PASS)@{{ .Values.rabbitmq.endpoint | default (printf "%s-rabbitmq.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.rabbitmq.containerPorts.amqp }}/
        - name: AMQP_EXCHANGE_NAME
          value: "analyzer-default"
        - name: AMQP_VIRTUAL_HOST
          value: "{{ .Values.rabbitmq.vhost }}"
        - name: ES_HOSTS
          value: "{{ .Values.elasticsearch.endpoint }}"
        {{- if .Values.elasticsearch.secretName }}
        - name: ES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.elasticsearch.secretName }}"
              key: "username"
        - name: ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.elasticsearch.secretName }}"
              key: "password"
        {{- else }}
        - name: ES_USER
          value: "{{ .Values.elasticsearch.user }}"
        - name: ES_PASSWORD
          value: "{{ .Values.elasticsearch.password }}" 
        {{- end }}
        {{- if .Values.serviceanalyzer.uwsgiWorkers }}
        - name: UWSGI_WORKERS
          value: "{{ .Values.serviceanalyzer.uwsgiWorkers }}"
        {{- end }}
        image: "{{ .Values.serviceanalyzer.repository }}:{{ .Values.serviceanalyzer.tag }}"
        name: analyzer
        ports:
        - containerPort: 5001
          name: analyzercore
        resources:
          requests:
            cpu: {{ .Values.serviceanalyzer.resources.requests.cpu }}
            memory: {{ .Values.serviceanalyzer.resources.requests.memory }}
          limits:
            cpu: {{ .Values.serviceanalyzer.resources.limits.cpu }}
            memory: {{ .Values.serviceanalyzer.resources.limits.memory }}
{{- if .Values.serviceanalyzer.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := .Values.serviceanalyzer.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
{{- end }}
      securityContext:
{{ toYaml .Values.serviceanalyzer.securityContext | indent 8}}
      serviceAccountName: {{ .Values.serviceanalyzer.serviceAccountName }}
{{- with .Values.tolerations }}
      tolerations: 
{{- toYaml . | nindent 8 }}
{{- end }}