apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "reportportal.fullname" . }}-analyzer
  labels: {{ include "labels" . | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: {{ include "reportportal.fullname" . }}-analyzer
  serviceName: {{ include "reportportal.fullname" . }}-analyzer
  template:
    metadata:
      labels:
        {{- range $key, $value := .Values.serviceanalyzer.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        component: {{ include "reportportal.fullname" . }}-analyzer
      annotations:
        {{- range $key, $value := .Values.serviceanalyzer.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: migrations-waiting-init
        image: "{{ .Values.k8sWaitFor.image.repository }}:{{ .Values.k8sWaitFor.image.tag }}"
        imagePullPolicy: IfNotPresent
        args:
          - "pod-wr"
          - "-lcomponent={{ include "reportportal.fullname" . }}-api"
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 50m
            memory: 100Mi
{{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
{{- end }}
      containers:
      - name: "{{ $.Values.serviceanalyzer.name | default "analyzer" }}"
        image: "{{ .Values.serviceanalyzer.image.repository }}:{{ .Values.serviceanalyzer.image.tag }}"
        imagePullPolicy: "{{ .Values.serviceanalyzer.pullPolicy }}"
        ports:
        - containerPort: 5001
          name: analyzercore
        resources:
          requests:
            cpu: {{ .Values.serviceanalyzer.resources.requests.cpu }}
            memory: {{ .Values.serviceanalyzer.resources.requests.memory }}
          limits:
            cpu: {{ .Values.serviceanalyzer.resources.limits.cpu }}
            memory: {{ .Values.serviceanalyzer.resources.limits.memory }}
        env:
{{- if .Values.serviceanalyzer.extraEnvs }}
{{ toYaml .Values.serviceanalyzer.extraEnvs | indent 8 }}
{{- end }}
        {{- if eq .Values.storage.type "minio"}}
        - name: ANALYZER_BINARYSTORE_TYPE
          value: "minio"
        - name: ANALYZER_BINARYSTORE_BUCKETPREFIX
          value: "{{ .Values.storage.bucket.bucketMultiPrefix }}"
        - name: MINIO_SHORT_HOST
          value: "{{ .Values.storage.endpoint | default (printf "%s-minio.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.storage.port }}"
        {{- if .Values.storage.secretName }}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.storage.secretName }}"
              key: "{{ .Values.storage.accesskeyName }}"
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.storage.secretName }}"
              key: "{{ .Values.storage.secretkeyName }}"
        {{- else }}
        - name: MINIO_ACCESS_KEY
          value: "{{ .Values.storage.accesskey }}"
        - name: MINIO_SECRET_KEY
          value: "{{ .Values.storage.secretkey }}"
        {{- end }}
        {{- else }}
        - name: ANALYZER_BINARYSTORE_TYPE
          value: "filesystem"
        {{- end }}
        - name: RP_AMQP_PASS
        {{- if .Values.msgbroker.secretName }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.msgbroker.secretName }}"
              key: "rabbitmq-password"
        {{- else }}
          value: "{{ .Values.msgbroker.password }}"
        {{- end }}
        - name: AMQP_URL
          value: {{ ternary "amqps" "amqp" .Values.msgbroker.ssl }}://{{ .Values.msgbroker.user }}:$(RP_AMQP_PASS)@{{ .Values.msgbroker.endpoint | default (printf "%s-rabbitmq.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.msgbroker.port }}/
        - name: AMQP_EXCHANGE_NAME
          value: "{{ .Values.msgbroker.analyzerExchangeName | default "analyzer-default" }}"
        - name: AMQP_VIRTUAL_HOST
          value: "{{ .Values.msgbroker.vhost }}"
        - name: ES_HOSTS
          value: "{{ ternary "https" "http" .Values.searchengine.ssl }}://{{ .Values.searchengine.endpoint | default (printf "opensearch-cluster-master.%s.svc.cluster.local" .Release.Namespace) }}:{{ .Values.searchengine.port }}"
        {{- if .Values.searchengine.secretName }}
        - name: ES_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.searchengine.secretName }}"
              key: "username"
        - name: ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.searchengine.secretName }}"
              key: "password"
        {{- else }}
        - name: ES_USER
          value: "{{ .Values.searchengine.user }}"
        - name: ES_PASSWORD
          value: "{{ .Values.searchengine.password }}" 
        {{- end }}
        {{- if .Values.serviceanalyzer.uwsgiWorkers }}
        - name: UWSGI_WORKERS
          value: "{{ .Values.serviceanalyzer.uwsgiWorkers }}"
        {{- end }}
{{- if .Values.serviceanalyzer.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := .Values.serviceanalyzer.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
{{- end }}
      securityContext:
{{ toYaml .Values.serviceanalyzer.securityContext | indent 8}}
      serviceAccountName: {{ .Values.serviceanalyzer.serviceAccountName | default (include "reportportal.serviceAccountName" .) }}
{{- with .Values.tolerations }}
      tolerations: 
{{- toYaml . | nindent 8 }}
{{- end }}