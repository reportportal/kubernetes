apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "reportportal.fullname" . }}-api
  labels: {{ include "labels" . | indent 4 }}
spec:
  replicas: {{ .Values.serviceapi.replicaCount | default 1 }}
  selector:
    matchLabels:
      component: {{ include "reportportal.fullname" . }}-api
  template:
    metadata:
      labels:
        {{- range $key, $value := .Values.serviceapi.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        component: {{ include "reportportal.fullname" . }}-api
      annotations:
        {{- range $key, $value := .Values.serviceapi.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: migrations-waiting-init
        image: "{{ .Values.k8sWaitFor.images.repository }}:{{ .Values.k8sWaitFor.images.tag }}"
        imagePullPolicy: IfNotPresent
        args:
          - "job-wr"
          - {{ include "reportportal.fullname" . }}-migrations
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 50m
            memory: 100Mi
{{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
{{- end }}
      containers:
      - name: "{{ $.Values.serviceapi.name | default "api" }}"
        image: "{{ .Values.serviceapi.image.repository }}:{{ .Values.serviceapi.image.tag }}"
        imagePullPolicy: "{{ .Values.serviceapi.pullPolicy }}"
        ports:
        - containerPort: 8585
          protocol: TCP
        resources: {{- toYaml .Values.serviceapi.resources | nindent 10 }}
        env:
{{- if .Values.serviceapi.extraEnvs }}
{{ toYaml .Values.serviceapi.extraEnvs | indent 8 }}
{{- end }}
        # TODO: remove SERVER_SERVLET_CONTEXT_PATH after change base path in service-api
        - name: SERVER_SERVLET_CONTEXT_PATH
          value: "/api"
        {{- if .Values.serviceapi.auditLogs.enable }}
        - name: AUDIT_LOGGER
          value: "on"
        {{- end }}
        - name: RP_ENVIRONMENT_VARIABLE_ALLOW_DELETE_ACCOUNT
          value: "{{ .Values.serviceapi.allowDeleteAccount }}"
        {{- if .Values.searchengine.doubleEntry }}
        - name: RP_ELASTICSEARCHLOGMESSAGE_HOST
          value: "{{ ternary "https" "http" .Values.searchengine.ssl }}://{{ .Values.searchengine.endpoint | default (printf "opensearch-cluster-master.%s.svc.cluster.local" .Release.Namespace) }}:{{ .Values.searchengine.port }}"
        {{- end }}
        - name: LOGGING_LEVEL_ORG_HIBERNATE_SQL
          value: "info"
        - name: RP_REQUESTLOGGING
          value: "false"
        - name: RP_AMQP_QUEUES
          value: {{ .Values.serviceapi.queues.totalNumber | default "10" | quote }}
        - name: RP_AMQP_QUEUESPERPOD
          value: {{ .Values.serviceapi.queues.perPodNumber | default "10" | quote }}
        {{- if .Values.serviceapi.jvmArgs }}
        - name: JAVA_OPTS
          value: "{{ .Values.serviceapi.jvmArgs }}"
        {{- end }}
        - name: RP_AMQP_ANALYZER-VHOST
          value: "{{ .Values.msgbroker.vhost }}"
        - name: RP_AMQP_PASS
        {{- if .Values.msgbroker.secretName }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.msgbroker.secretName }}"
              key: "rabbitmq-password"
        {{- else }}
          value: "{{ .Values.msgbroker.password }}"
        {{- end }}
        - name: RP_AMQP_API_ADDRESS
          value: {{ ternary "https" "http" .Values.msgbroker.ssl }}://{{ .Values.msgbroker.apiuser }}:$(RP_AMQP_PASS)@{{ .Values.msgbroker.endpoint | default (printf "%s-rabbitmq.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.msgbroker.apiport }}/api
        - name: RP_AMQP_ADDRESSES
          value: '{{ ternary "amqps" "amqp" .Values.msgbroker.ssl }}://{{ .Values.msgbroker.user }}:$(RP_AMQP_PASS)@{{ .Values.msgbroker.endpoint | default (printf "%s-rabbitmq.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.msgbroker.port }}'
        - name: RP_DB_HOST
          value: {{ .Values.database.endpoint | default (printf "%s-postgresql.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}
        - name: RP_DB_PORT
          value: "{{ .Values.database.port }}"
        - name: RP_DB_NAME
          value: "{{ .Values.database.dbName }}"
        {{- if .Values.database.connections }}
        - name: RP_DATASOURCE_MAXIMUMPOOLSIZE
          value: "{{ .Values.database.connections }}"
        {{- end }}
        - name: RP_DB_USER
          value: "{{ .Values.database.user }}"
        - name: RP_DB_PASS
        {{- if .Values.database.secretName }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.database.secretName }}"
              key: "postgresql-password"
        {{- else }}
          value: "{{ .Values.database.password }}"
        {{- end }}
        {{- if eq .Values.storage.bucket.type "single" }}
        - name: RP_FEATURE_FLAGS
          value: "singleBucket"
        {{- end }}
        - name: DATASTORE_TYPE
          value: "{{ .Values.storage.type }}"
        {{- if eq .Values.storage.type "minio" }}
        - name: DATASTORE_ENDPOINT
          value: "{{ ternary "https" "http" .Values.storage.ssl }}://{{ .Values.storage.endpoint | default (printf "%s-minio.%s.svc.cluster.local" .Release.Name .Release.Namespace) }}:{{ .Values.storage.port }}"
        {{- end }}
        {{- if .Values.storage.region }}
        - name: DATASTORE_REGION
          value: "{{ .Values.storage.region }}"
        {{- end }}
        {{- if .Values.storage.secretName }}
        - name: DATASTORE_ACCESSKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.storage.secretName }}"
              key: "{{ .Values.storage.accesskeyName }}"
        - name: DATASTORE_SECRETKEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.storage.secretName }}"
              key: "{{ .Values.storage.secretkeyName }}"
       {{- else }}
        - name: DATASTORE_ACCESSKEY
          value: "{{ .Values.storage.accesskey }}"
        - name: DATASTORE_SECRETKEY
          value: "{{ .Values.storage.secretkey }}"
       {{- end }}
       {{- if eq .Values.storage.bucket.type "multi" }}
        - name: DATASTORE_BUCKETPREFIX
          value: "{{ .Values.storage.bucket.bucketMultiPrefix }}"
        - name: DATASTORE_BUCKETPOSTFIX
          value: "{{ .Values.storage.bucket.bucketMultiPostfix }}"
        - name: RP_INTEGRATION_SALT_PATH
          value: "{{ .Values.storage.bucket.bucketMultiSaltName }}"
       {{- end }}
        - name: DATASTORE_DEFAULTBUCKETNAME
          value: "{{ .Values.storage.bucket.bucketDefaultName }}"
        - name: MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED
          value: "false"
        {{- if .Values.serviceapi.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8585
          initialDelaySeconds: {{ .Values.serviceapi.readinessProbe.initialDelaySeconds | default 30 }}
          periodSeconds: {{ .Values.serviceapi.readinessProbe.periodSeconds | default 20 }}
          timeoutSeconds: {{ .Values.serviceapi.readinessProbe.timeoutSeconds | default 3 }}
          failureThreshold: {{ .Values.serviceapi.readinessProbe.failureThreshold | default 20 }}
        {{- end }}
        {{- if .Values.serviceapi.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8585
          initialDelaySeconds: {{ .Values.serviceapi.livenessProbe.initialDelaySeconds | default 30 }}
          periodSeconds: {{ .Values.serviceapi.livenessProbe.periodSeconds | default 20 }}
          timeoutSeconds: {{ .Values.serviceapi.livenessProbe.timeoutSeconds | default 5 }}
          failureThreshold: {{ .Values.serviceapi.livenessProbe.failureThreshold | default 5 }}
        {{- end }}
        volumeMounts:
          {{- if .Values.serviceapi.secret.enabled }}
          - mountPath: {{ .Values.serviceapi.secret.mountPath }}
            name: {{ template "reportportal.name" . }}-serviceapi-secret
            readOnly: {{ .Values.serviceapi.secret.readOnly }}
          {{- end }}
          {{- if .Values.serviceapi.auditLogs.enable }}
          - name: audit-log-volume
            mountPath: /var/log
          {{- end }}
      {{- if .Values.serviceapi.auditLogs.enable }}
      - name: auditlogstreamer
        image: "{{ .Values.serviceapi.auditLogs.sidecar.repository }}:{{ .Values.serviceapi.auditLogs.sidecar.tag }}"
        command:
          - /bin/sh
        args: 
          - -c
          - while true; do if [ -e "/var/log/reportportal/audit.log" ]; then tail -f /var/log/reportportal/audit.log; else sleep 60; fi; done
        imagePullPolicy: IfNotPresent
        resources: {{- toYaml .Values.serviceapi.auditLogs.sidecar.resources | nindent 10 }}
        volumeMounts:
          - name: audit-log-volume
            mountPath: /var/log
      {{- end }}
{{- if .Values.serviceapi.nodeSelector }}
      nodeSelector:
        {{- range $key, $value := .Values.serviceapi.nodeSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
{{- end }}
      securityContext:
{{- toYaml .Values.serviceapi.securityContext | indent 8 }}
      serviceAccountName: {{ .Values.serviceapi.serviceAccountName | default (include "reportportal.serviceAccountName" .) }}
{{- with .Values.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
{{- end }}
      volumes:
        {{- if .Values.serviceapi.secret.enabled }}
        - name: {{ template "reportportal.name" . }}-serviceapi-secret
          secret:
            secretName: {{ template "reportportal.name" . }}-serviceapi-secret
        {{- end }}
        {{- if .Values.serviceapi.auditLogs.enable }}
        - name: audit-log-volume
          emptyDir: {}
        {{- end }}